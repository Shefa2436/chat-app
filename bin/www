#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat-app:server');
var http = require('http');
var socketio = require('socket.io');
const db = require('../db');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = socketio(server);

io.on('connection', (socket) => {
  console.log('Потребител се свърза');

  socket.on('user joined', (username) => {
    socket.username = username;

    db.all(`SELECT username, message FROM messages ORDER BY id DESC LIMIT 20`, (err, rows) => {
      if (err) {
        console.error('DB Read Error:', err.message);
        return;
      }

      rows.reverse();
      socket.emit('chat history', rows);

      io.emit('system message', `${username} влезе в чата.`);
    });
  });

  socket.on('chat message', (data) => {
    db.run(`INSERT INTO messages (username, message) VALUES (?, ?)`, [data.user, data.msg], (err) => {
      if (err) console.error('DB Error:', err.message);
    });

    io.emit('chat message', {
      user: data.user,
      msg: data.msg
    });
  });

  socket.on('disconnect', () => {
    if (socket.username) {
      io.emit('system message', `${socket.username} напусна чата.`);
    }
    console.log('Потребител напусна чата');
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
